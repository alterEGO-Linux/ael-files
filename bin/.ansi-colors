<!-- INFO {{{

# :: [/droidnotes/ansi-colors.md]
# :: author        : Pascal Malouin @ github.com/fantomH
# :: created       : 2023-07-19 00:00:00 UTC
# :: updated       : 2025-10-06 10:11:04 UTC
# :: description   : ANSI colors are part of the ANSI escape code, which is a
                     set of ASCII escape character and bracket embeded in text
                     to signal to the terminal to interpret it as command.
# :: tags          : #ansi #color #printf

}}} -->

# ANSI Colors

ANSI colors are part of the ANSI escape code, which is a set of ASCII escape character and bracket embeded in text to signal to the terminal to interpret it as command.

```sh
# :: ( styles )
declare -r reset=$'\e[0m'
declare -r bold=$'\e[1m'
declare -r dim=$'\e[2m'
declare -r italic=$'\e[3m'
declare -r underline=$'\e[4m'
declare -r blink=$'\e[5m'
declare -r reverse=$'\e[7m'
declare -r hidden=$'\e[8m'
declare -r strikethrough=$'\e[9m'

# :: ( foreground - standard )
declare -r fg_black=$'\e[30m'
declare -r fg_red=$'\e[31m'
declare -r fg_green=$'\e[32m'
declare -r fg_yellow=$'\e[33m'
declare -r fg_blue=$'\e[34m'
declare -r fg_magenta=$'\e[35m'
declare -r fg_cyan=$'\e[36m'
declare -r fg_white=$'\e[37m'
declare -r fg_default=$'\e[39m'

# :: ( foreground - bright )
declare -r fg_bright_black=$'\e[90m'
declare -r fg_bright_red=$'\e[91m'
declare -r fg_bright_green=$'\e[92m'
declare -r fg_bright_yellow=$'\e[93m'
declare -r fg_bright_blue=$'\e[94m'
declare -r fg_bright_magenta=$'\e[95m'
declare -r fg_bright_cyan=$'\e[96m'
declare -r fg_bright_white=$'\e[97m'

# :: ( background - standard )
declare -r bg_black=$'\e[40m'
declare -r bg_red=$'\e[41m'
declare -r bg_green=$'\e[42m'
declare -r bg_yellow=$'\e[43m'
declare -r bg_blue=$'\e[44m'
declare -r bg_magenta=$'\e[45m'
declare -r bg_cyan=$'\e[46m'
declare -r bg_white=$'\e[47m'
declare -r bg_default=$'\e[49m'

# :: ( background - bright )
declare -r bg_bright_black=$'\e[100m'
declare -r bg_bright_red=$'\e[101m'
declare -r bg_bright_green=$'\e[102m'
declare -r bg_bright_yellow=$'\e[103m'
declare -r bg_bright_blue=$'\e[104m'
declare -r bg_bright_magenta=$'\e[105m'
declare -r bg_bright_cyan=$'\e[106m'
declare -r bg_bright_white=$'\e[107m'
```

Examples:

```sh
printf "%s\n" "${fg_green}${bold}Success${reset}"
printf "%s\n" "${bg_bright_blue}${fg_white} Info ${reset}"
```

## 256-color and Truecolor (RBG)

```sh
# 256-color (use: "$(fg256 196)" … "$(reset)")
fg256() { printf $'\e[38;5;%sm' "$1"; }
bg256() { printf $'\e[48;5;%sm' "$1"; }

# Truecolor (RGB)
rgb_fg() { printf $'\e[38;2;%s;%s;%sm' "$1" "$2" "$3"; }
rgb_bg() { printf $'\e[48;2;%s;%s;%sm' "$1" "$2" "$3"; }
```

Examples 256-color:

```sh
# :: Foreground: bright red (196)
printf "%sError:%s something went wrong\n" "$(fg256 196)" "$reset"

# :: Background: blue (21) with white text (15)
printf "%s%s INFO %s message body\n" "$(bg256 21)" "$(fg256 15)" "$reset"

# :: Mixed badge
printf "%s%s WARN %s details follow\n" "$(bg256 226)" "$(fg256 16)" "$reset"

# :: Quick swatch of a few 256 colors
for i in 196 202 208 214 220 226; do
  printf "%s %3d %s" "$(fg256 "$i")" "$i" "$reset"
done

printf "\n"
```

Examples Truecolor (RBG):

```sh
# :: Orange-ish foreground on dark gray background
printf "%s%s★ Success%s\n" "$(rgb_bg 30 30 30)" "$(rgb_fg 255 180 0)" "$reset"

# :: Soft red badge
printf "%s%s FAIL %s explanation\n" "$(rgb_bg 220 40 60)" "$(rgb_fg 255 255 255)" "$reset"
```

<!--
# vim: foldmethod=marker
-->
