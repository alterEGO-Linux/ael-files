# :----------------------------------------------------------------------- INFO
# :[~/.ael/.pythonenvs]
# :author        : fantomH
# :created       : 2024-04-08 16:48:47 UTC
# :updated       : 2024-04-16 10:43:38 UTC
# :description   : Manage python -m venv

ENVSDIR="${HOME}/.ael/pythonenvs"

if [ ! -d "${ENVSDIR}" ]; then
  mkdir "${ENVSDIR}"
fi

# :---------- [ message() ] 
message() {

  # :message() - Print messages on the terminal.
  #
  # :module : bash-ael/messages.bash
  # :version: 2024-04-11 15:37:23 UTC
  # :Usage  : message <type> <"Message">

  BLUE="\033[34m"
  BOLD="\033[1m"
  GREEN="\033[32m"
  RED="\033[31m"
  RESET="\033[0m"
  YELLOW="\033[33m"

  _msg="${2}"

  case ${1} in

    action )
      printf '%b\n' "${GREEN}[*]${RESET} ${BOLD}${_msg}${RESET}"
      ;;
    result )
      printf '%b\n' "${BLUE}[-]${RESET} ${_msg}"
      ;;
    question )
      ## The input will be in $_INPUT.
      read -p $'\033[34m[?]\033[0m \033[1m'"${_msg}"$'\033[0m ' _INPUT
      ;;
    alert )
      printf '%b\n' "${YELLOW}[!]${RESET} ${_msg}"
      ;;
    warning|error )
      printf '%b\n' "${RED}[!]${RESET} ${BOLD}${_msg}${RESET}"
      ;;
    title )
      printf '%b\n' "${BOLD}${_msg}${RESET}"
      ;;
  esac
}

# :---------- [ PROMPTS ]
prompt_command() {
  history -a
  dateNOW="$(date "+%F %H:%M:%S %Z")"

  # :tty won't show unicode character #10095.
  if tty | grep pts &>/dev/null; then

      PS1="\[${RESET}\]\[${GREEN}\](${ENVNAME})-[\[${RESET}\]\w\[${GREEN}\]] • \[$dateNOW\]\n\[${GREEN}\]❯ \[${RESET}\]"
      export PS1

  else
      PS1="\[${RESET}\]\[${GREEN}\](${ENVNAME})-[\[${RESET}\]\w\[${GREEN}\]] • \[$dateNOW\]\n\[${GREEN}\]> \[${RESET}\]"
      export PS1
  fi
}

# :---------- [ JUPYTER  ] 

init_jupyter() {

  # :init_jupyter() - Unable Jupyter stuff.
  #
  # :module : pythonenvs
  # :version: 2024-04-16 10:40:47 UTC

  # :ref    : https://janakiev.com/blog/jupyter-virtual-envs/

  if [ -n $(command -v jupyter-notebook) ]; then
      if pip freeze | grep -q "ipykernel"; then
          message result "Module ipykernel for Jupyter already installed."
      else
          message action  "Installing ipykernel for Jupyter."
          pip install ipykernel
      fi
      python -m ipykernel install --user --name="${ENVNAME}"
  else
      message warning "Jupyter not installed!"
  fi
}

create_env() {
  python -m venv "${ENVSDIR}/${ENVNAME}"
  activate
}

# :---------- [ activate() ]
activate() {
  message action "Starting python environment: ${ENVNAME}"
  if [ ! -d "${ENVSDIR}/${ENVNAME}" ]; then
    echo "ENV ${ENVNAME} does not exists."
    unset -f bye
    source ~/.bashrc
  else
    source "${ENVSDIR}/${ENVNAME}/bin/activate"
    prompt_command
    init_jupyter
  fi
}

# :---------- [ list_envs() ]

list_envs() {

  # :list_envs() - List available python environments.
  #
  # :module : pythonenvs
  # :version: 2024-04-16 10:55:14 UTC

  message action "Fetching python environments' list:"
  find "${ENVSDIR}" -type d -name 'bin' -exec test -e '{}/python' ';' -print | xargs dirname | xargs -n1 basename
}

# :---------- [ list_all_envs() ]

list_all_envs() {

  # :list_al_envs() - List available python environments.
  #
  # :module : pythonenvs
  # :version: 2024-04-16 10:57:36 UTC

  message action "Fetching ALL python environments' list:"
  find ~ -type d -name 'bin' -exec test -e '{}/python' ';' -print | xargs dirname
}

# :---------- [ bye() ]

bye() {
  message warning "Quitting python environment: ${ENVNAME}"
  [ -f ${HOME}/.bashrc ] && . ${HOME}/.bashrc
  unset -f bye
  deactivate
}

while (( "$#" )); do
  case $1 in
    -c|--create)
      shift
      ENVNAME="${1}"
      create_env
      ;;
    -a|--activate)
      shift
      ENVNAME="${1}"
      activate
      ;;
    -l|--list)
      list_envs
      ;;
    --all)
      list_all_envs
      ;;
  esac
  shift
done

# :------------------------------------------------------------- FIN ¯\_(ツ)_/¯
