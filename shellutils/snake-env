#!/usr/bin/env sh
# :----------------------------------------------------------------------- INFO
# :[~/.ael/shellutils/snake-env]
# :author        : alterEGO Linux
# :created       : 2024-10-23 11:28:49 UTC
# :updated       : 2025-07-07 18:26:06 UTC
# :description   : Manage python -m venv.

snake-env() {

    local args=("$@") GREEN RESET YELLOW BLUE RED

    BLUE="\033[34m"
    GREEN="\033[32m"
    RED="\033[31m"
    RESET="\033[0m"
    YELLOW="\033[33m"

    export SNAKE_ENV_DIR="${SNAKE_ENV_DIR:-$HOME/.ael/snake-env}"
    export SNAKE_ENV="${SNAKE_ENV}"

    if [ ! -d "${SNAKE_ENV_DIR}" ]; then
        mkdir "${SNAKE_ENV_DIR}"
    fi

    snake-unsetter() {
        unset SNAKE_ENV
        unset SNAKE_ENV_DIR
        unset SNAKE_ENV_ACTIVE
        unset -f list-environments
        unset -f list-all-environments
        unset -f snake-activate
        unset -f snake-create
        unset -f snake-cd
        unset -f snake-exit
        unset -f snake-info
        unset -f snake-install-jupyter
        unset -f snake-install-requirements
        unset -f snake-notebook
        unset -f snake-upgrade
        unset -f snake-usage
        unset -f snake-unsetter
        [ -f ${HOME}/.bashrc ] && . ${HOME}/.bashrc
    }

    snake-activate() {

        if [ ! -d "${SNAKE_ENV_DIR}/${SNAKE_ENV}" ]; then
            echo -e "${RED}[!]${RESET} Environment ${SNAKE_ENV} does not exists."
            snake-unsetter

        else
            echo -e "${BLUE}[-]${RESET} Starting python environment: ${SNAKE_ENV}."

            if ! grep -q "$(readlink -f $(command -v python))" ${SNAKE_ENV_DIR}/${SNAKE_ENV}/pyvenv.cfg; then
                echo -e "${RED}[!]${RESET} Outdated environment. Run snake-upgrade."
            fi

            source "${SNAKE_ENV_DIR}/${SNAKE_ENV}/bin/activate"

            # :: ( PROMPT )
            prompt_command() {
                history -a
                local date_now="$(date "+%F %H:%M:%S %Z")"

                # :/TTY won't show unicode character #10095.
                if tty | grep pts &>/dev/null; then

                    PS1="\[${RESET}\]\[${GREEN}\](snake-env: ${SNAKE_ENV})-[\[${RESET}\]\w\[${GREEN}\]] • \[$date_now\]\n\[${GREEN}\]❯ \[${RESET}\]"

                else
                    PS1="\[${RESET}\]\[${GREEN}\](snake-env: ${SNAKE_ENV})-[\[${RESET}\]\w\[${GREEN}\]] • \[$date_now\]\n\[${GREEN}\]> \[${RESET}\]"
                fi

                export PS1
            }
            PROMPT_COMMAND=prompt_command

            export SNAKE_ENV_ACTIVE=true
        fi
    }

    snake-cd() {
        cd "${SNAKE_ENV_DIR}/${SNAKE_ENV}"
    }

    snake-create() {
        local NEW_ENV="${SNAKE_ENV_DIR}/${SNAKE_ENV}"
        if [ -d "${NEW_ENV}" ]; then
            echo -e "${RED}[!]${RESET} Snake Environment ${SNAKE_ENV} already exists."
        else
            python -m venv "${NEW_ENV}"
            echo -e "${BLUE}[-]${RESET} Snake Environment ${SNAKE_ENV} created."
        fi
    }

    snake-exit() {
        echo -e "${YELLOW}[!]${RESET} Quitting python environment: ${SNAKE_ENV}."
        deactivate
        snake-unsetter
    }

    snake-info() {

        local pkgs=()
        while IFS= read -r line; do
            pkgs+=("$line")
        done < <(pip freeze 2>/dev/null)

        echo "Info: snake-env \"${SNAKE_ENV}\""
        echo "    Env. Path     : ${SNAKE_ENV_DIR}/${SNAKE_ENV}"
        echo "    Python Path   : $(command -v python)"

        if [ "${#pkgs[@]}" -gt 0 ]; then
            echo "    Installed Pkg : ${pkgs[0]}"
            for ((i=1; i<${#pkgs[@]}; i++)); do
                echo "                    ${pkgs[i]}"
            done
        else
            echo "    Installed Pkg : (none)"
        fi
    }

    snake-install-jupyter() {

        # :/ref/ https://janakiev.com/blog/jupyter-virtual-envs/

        if [ -n $(command -v jupyter-notebook) ]; then
            if pip freeze | grep -q "ipykernel"; then
                echo -e "${YELLOW}[-]${RESET} Module ipykernel for Jupyter already installed."
            else
                echo -e "${BLUE}[-]${RESET} Installing ipykernel for Jupyter."
                pip install ipykernel
            fi
            python -m ipykernel install --user --name="${SNAKE_ENV}"

            if [[ ! -e "${SNAKE_ENV_DIR}/${SNAKE_ENV}/${SNAKE_ENV}.ipynb" ]]; then
                cat <<EOF > ${SNAKE_ENV_DIR}/${SNAKE_ENV}/${SNAKE_ENV}.ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF
            fi

        else
            echo -e "${RED}[!]${RESET} Jupyter not installed!"
        fi
    }

    snake-install-requirements() {

        local REQUIREMENTS="${SNAKE_ENV_DIR}/${SNAKE_ENV}/requirements.txt"
        if [ "${#}" > 0 ]; then
            cp "${1}" "${REQUIREMENTS}"
            pip install -r "${REQUIREMENTS}"
        else
            echo -e "${RED}[!]${RESET} You must provide a valid requirements file."
        fi
        }

    snake-notebook() {
        if [[ -e "${SNAKE_ENV_DIR}/${SNAKE_ENV}/${SNAKE_ENV}.ipynb" ]]; then
           jupyter-notebook "${SNAKE_ENV_DIR}/${SNAKE_ENV}/${SNAKE_ENV}.ipynb" &
        fi
        }

    list-all-environments() {

        echo -e "${BLUE}[-]${RESET} Fetching ALL python environments' list:"

        environments=$(find ~ -type d -name 'bin' -exec test -e '{}/python' ';' -print 2>/dev/null)

        if [[ -n "${environments}" ]]; then
            echo "${environments}" | xargs dirname
        else
            echo "(none found)"
        fi
    }

    list-environments() {

        echo -e "${BLUE}[-]${RESET} Fetching python environments' list:"

        environments=$(find "${SNAKE_ENV_DIR}" -type d -name 'bin' -exec test -e '{}/python' ';' -print 2>/dev/null)

        if [[ -n "${environments}" ]]; then
            echo "${environments}" | xargs dirname | xargs -n1 basename
        else
            echo "(none found)"
        fi
    }

    snake-upgrade() {
        python -m venv --upgrade ${SNAKE_ENV_DIR}/${SNAKE_ENV}
    }

    snake-usage() {
        cat <<EOF
================================================================================
[+] snake-env - Manage python -m venv.
================================================================================
Usage: snake-env [OPTIONS] <environment-name>

A utility to manage Python virtual environments in a custom directory, including setup for Jupyter kernel integration.

Options:
  -c, --create <environment-name>  Create a new Python virtual environment with the specified name and activate it.
  -a, --activate <environment-name> Activate an existing Python virtual environment.
  -l, --list                       List all managed Python virtual environments within the custom directory.
  --listall                        List all Python virtual environments on the system.
  -h, --help                       Display this help message.

Examples:
  snake-env -c myenv               # Create and activate a new environment named 'myenv'
  snake-env -a myenv               # Activate an existing environment named 'myenv'
  snake-env -l                     # List all environments managed by snake-env
  snake-env --listall              # List all Python environments on the system

Internal commands:
  snake-cd                         Change directory to the virtual environment.
  snake-exit                       Exit environment.
  snake-info                       Show environment informations.
  snake-install-jupyter            Install Jypiter notebook.
  snake-install-requirements       Install requirements if a valid file is provided.
  snake-notebook                   Launch a Jupyter notebook.
  snake-upgrade                    Upgrade the environment.
  snake-usage                      This help.
================================================================================
EOF
    }

    # :: If already in a snake-env session.
    if [[ ${SNAKE_ENV_ACTIVE} == 'true' ]]; then
        echo -e "${RED}[!]${RESET} already in a session."
        return 1
    fi

    # :: Show help if no arguments.
    if [[ "${#}" -eq 0 ]]; then
        snake-usage
        snake-unsetter
        return 1
    fi

    # :: Show help and ignore other arguments.
    for arg in "${@}"; do
        if [[ "${arg}" == "-h" || "${arg}" == "--help" ]]; then
            snake-usage
            snake-unsetter
            return 0
        fi
    done

    # ::( argument parser )
    source ${HOME}/.ael/shellutils/utils/argument-parser

    local ARGUMENT_INPUT=("${@}")
    declare -A activate=([short]="-a" [long]="--activate" [value_required]=true [conflicts_with]="create")
    declare -A create=([short]="-c" [long]="--create" [value_required]=true [conflicts_with]="activate")
    declare -A directory=([short]="-d" [long]="--directory" [value_required]=true)
    declare -A list=([short]="-l" [long]="--list" [conflicts_with]="create activate listall")
    declare -A listall=([long]="--listall" [conflicts_with]="create activate list")

    local FLAGS=("activate" "create" "directory" "list" "listall")
    local ARGUMENTS=()
    argument-parser

    set -- "${ARGUMENTS[@]}"
    while (( "$#" )); do
        case $1 in
            -a|--activate)
                shift
                SNAKE_ENV="${1}"
                snake-activate
                unset -f snake-activate
                unset -f snake-create
                unset -f list-environments
                unset -f list-all-environments
                ;;
            -c|--create)
                shift
                SNAKE_ENV="${1}"
                snake-create
                snake-unsetter
                ;;
            -d|--directory)
                shift
                SNAKE_ENV_DIR="${1}"
                ;;
            -l|--list)
                list-environments
                snake-unsetter
                ;;
            --listall)
                list-all-environments
                snake-unsetter
                ;;
      esac
      shift
    done
}
