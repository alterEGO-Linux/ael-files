#!/usr/bin/env bash
# :----------------------------------------------------------------------- INFO
# :[~/.ael/shellutils/goto]
# :author        : AlterEGO Linux
# :created       : 2024-09-13 11:00:51 UTC
# :updated       : 2025-07-09 16:52:53 UTC
# :description   : Simple directory bookmarks system.

GOTODIR="${HOME}/.ael/.goto/"

[[ ! -d "${GOTODIR}" ]] && mkdir -p "${GOTODIR}"

export CDPATH=".:$GOTODIR:/"

goto() {

    local IFS=$'\n'
    local __args=("$@")
    local __arg
    local __input
    local __target
    local BLUE=$'\033[34m'
    local RED=$'\033[31m'
    local RESET=$'\033[0m'

    goto-usage() {
        cat <<EOF
================================================================================
[+] goto - Simple directory bookmarks system.
================================================================================
Usage: goto [bookmark|--add PATH BOOKMARK|--help|--list|--remove BOOKMARK]

Examples:
  goto @app            # :: Navigate to the @app bookmark.

Options:
  --add PATH BOOKMARK  Add a new bookmark for the specified path.
  --help               Display this help message.
  --list               List bookmarks.
  --remove BOOKMARK    Remove a bookmark.
================================================================================
EOF
    }

    # :-( help )
    for __arg in "${__args[@]}"; do
        if [ "$__arg" == '-h' ] || [ "$__arg" == '--help' ]; then
            goto-usage
            unset -f goto-usage
            return 0
        fi
    done

    # :-( list )
    for __arg in "${__args[@]}"; do
        if [ "$__arg" == '-l' ] || [ "$__arg" == '--list' ]; then
            goto-usage
            unset -f goto-usage
            echo
            find "${GOTODIR}" -maxdepth 1 -type l | while read -r link; do
                __target=$(readlink -f "${link}")
                printf "%-15s -> %s\n" "$(basename "${link}")" "${__target}"
            done
            return 0
        fi
    done

    # :-( add )
    for i in "${!__args[@]}"; do
        if [[ "${__args[i]}" == "-a" ]] || [[ "${__args[i]}" == "--add" ]]; then
            if [[ -n "${__args[i+1]}" && -n "${__args[i+2]}" ]]; then
                ln -s "$(realpath "${__args[i+1]}")" "${GOTODIR}/${__args[i+2]}"
                printf '%s\n' "${BLUE}[-]${RESET} goto - Bookmark '${__args[i+2]}' added for path '${__args[i+1]}'."
                return 0
            else
                goto-usage
                unset -f goto-usage
                echo
                printf '%s\n' "${RED}[!]${RESET} Error: Both PATH and BOOKMARK are required."
                return 1
            fi
        fi
    done

    # :-( remove )
    for i in "${!__args[@]}"; do
        if [[ "${__args[i]}" == "-r" ]] || [[ "${__args[i]}" == "--remove" ]]; then
            if [[ -n "${__args[i+1]}" ]]; then
                __target="${GOTODIR}/${__args[i+1]}"
                if [[ -L "$__target" ]]; then
                    read -p "${BLUE}[?]${RESET} Are you sure your want to delete this bookmark? [y/N] " __input
                        if [[ "${__input}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                            rm -f "$__target"
                            printf '%s\n' "${BLUE}[+]${RESET} goto - Bookmark '${__args[i+1]}' removed."
                            return 0
                        else
                            printf '%s\n' "${RED}[!]${RESET} goto - Abording deletion!"
                            return 0
                        fi
                else
                    goto-usage
                    unset -f goto-usage
                    echo
                    printf '%s\n' "${RED}[!]${RESET} Error: Bookmark '${__args[i+1]}' not found."
                    return 1
                fi
            else
                goto-usage
                unset -f goto-usage
                echo
                printf '%s\n' "${RED}[!]${RESET} Error: BOOKMARK is required."
                return 1
            fi
        fi
    done

    # :-( goto )
    if [[ "${#__args[@]}" -eq 0 ]]; then
        goto-usage
        unset -f goto-usage
        return 1
    elif [[ $# -ne 1 ]]; then
        goto-usage
        unset -f goto-usage
        echo
        printf '%s\n' "${RED}[!]${RESET} Error: Too many arguments."
        return 1
    else
        if [[ -e "${GOTODIR}/$1" ]]; then
            cd -P "${GOTODIR}/$1"
            return 0
        else
            goto-usage
            unset -f goto-usage
            echo
            printf '%s\n' "${RED}[!]${RESET} Error: '$1' is not a valid bookmark."
            return 1
        fi
    fi

    unset -f goto-usage
}

_goto_complete() {
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "$(find "${GOTODIR}" -maxdepth 1 -type l -printf "%f\n")" -- "${COMP_WORDS[COMP_CWORD]}") )

} && complete -F _goto_complete goto
