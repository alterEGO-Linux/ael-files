#!/usr/bin/env sh
# :----------------------------------------------------------------------- INFO
# :[~/.ael/.aelcore]
# :author        : AlterEGO Linux
# :created       : 2021-03-19 09:37:19 UTC
# :updated       : 2025-07-09 12:16:08 UTC
# :description   : AlterEGO Linux core shell configuration.

# :-----/ SOURCE MODULES

[ -f ${HOME}/.ael/bash-ael/messages.bash ] && . ${HOME}/.ael/bash-ael/messages.bash
[ -f ${HOME}/.ael/bash-ael/colors.bash ] && . ${HOME}/.ael/bash-ael/colors.bash
[ -f ${HOME}/.ael/.extra ] && . ${HOME}/.ael/.extra

alias architect="python ~/main/ael-architect/ael_architect/cli-textual.py"

# :-----/ COLORS /-----:

export TERM="xterm-256color"

# :Sets LS_COLORS
[[ -e ${HOME}/.ael/.dircolors ]] \
&& eval "`dircolors --sh ${HOME}/.ael/.dircolors`"

# :-----/ ALIASES /-----:

alias less="bat"
alias grep="grep --color=auto"
alias ll='ls --all --human-readable -l --color=auto'
alias ls='ls --all --color=auto'

# :Makes tmux understand the environment is important.
alias tmux="env TERM=screen-256color tmux -u"

alias msfconsole='msfconsole -x "db_connect ${USER}@msf"'
alias open="ael-open"

# :/todo/ Should we still source automatically. See above.
alias attack="source ${HOME}/.ael/.tryhackme"

alias pythonenvs=". ~/.ael/.pythonenvs"

# :-----/ DEFAULT APPLICATIONS /-----:

export BROWSER=firefox
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow '

# export TERMINAL="xfce4-terminal --hide-scrollbar --hide-menubar --hide-toolbar"
export TERMINAL="alacritty"
export VISUAL=vim
export EDITOR=${VISUAL}

# :-----/ PATH /-----:
# :ref. https://www.linuxjournal.com/content/removing-duplicate-path-entries

PATH="${HOME}/.local/bin:${PATH}:${HOME}/scripts:${HOME}/bin"
PATH=$(printf '%s' "${PATH}" | awk -v RS=: '!($0 in a) {a[$0]; printf("%s%s", length(a) > 1 ? ":" : "", $0)}')

export PATH

# :-----/ HISTORY /-----:

export HISTIGNORE="cd:clear:delete:exit:gitall:history:ls:mv:nohup:vim"
export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=1000000
export HISEFILESIZE=1000000

# :Uncomment if your want timestamp in history
# export HISTTIMEFORMAT="%Y-%m-%d %T %z "

# :-----/ MAN IN COLOR /-----:

# :/todo/ Need to work on the colors.
export LESS_TERMCAP_mb=$(printf '\e[01;31m') # enter blinking mode – red
export LESS_TERMCAP_md=$(printf '\e[01;35m') # enter double-bright mode – bold, magenta
export LESS_TERMCAP_me=$(printf '\e[0m')     # turn off all appearance modes (mb, md, so, us)
export LESS_TERMCAP_se=$(printf '\e[0m')     # leave standout mode
export LESS_TERMCAP_so=$(printf '\e[01;33m') # enter standout mode – yellow
export LESS_TERMCAP_ue=$(printf '\e[0m')     # leave underline mode
export LESS_TERMCAP_us=$(printf '\e[04;36m') # enter underline mode – cyan

# :-----/ VIM /-----:

# :Enables CTRL+s in vim.
# :ref. https://stackoverflow.com/questions/3446320/in-vim-how-to-map-save-to-ctrl-s
# :Requires mapping in .vimrc:
# :inoremap <C-s> <ESC>:write<CR>

stty -ixon

# :---------- [ QT5 ]

# :ref. https://wiki.manjaro.org/index.php/Set_all_Qt_app%27s_to_use_GTK%2B_font_%26_theme_settings
# :Set all Qt app's to use GTK+ font & theme settings
# :Overview
# :When using a Desktop Environment or Window Manager that doesn't allow for the settings of QT themes,
# :you can set QT to use your GTK themes instead.
# :Using qt5ct
# :note: In some Manjaro editions, this is already done for you by default
# :Install qt5ct using your favorite package manager or the command:
# :pamac install qt5ct
# :Set environment variables in ~/.profile by adding or updating the following lines:
# :export QT_QPA_PLATFORMTHEME="qt5ct"
# :Run the application QT5 Configuration Manager from the menu or run the command qt5ct.
# :Logout and login again to make the change effective

# export QT_QPA_PLATFORMTHEME="qt5ct"

# :---------- [ PROMPTS ]
prompt_command() {
    history -a
    dateNOW="$(date "+%F %H:%M:%S %Z")"

    # :tty won't show unicode character #10095.
    if tty | grep pts &>/dev/null; then

        # :(* SIMPLE *)
        # export PS1='[\u@\h \W]\$ '
        
        # :(* KALI STYLE *)
        # export PS1="\[${RESET}\]\[${GREEN}\]┌────(\[${RESET}\]\u@\h\[${GREEN}\])-[\[${RESET}\]\w\[${GREEN}\]]\n\[${GREEN}\]└─$ \[${RESET}\]"

        # :(* EGO *)
        export PS1="\[${RESET}\]\[${GREEN}\](\u@\h)-[\[${RESET}\]\w\[${GREEN}\]] • \[$dateNOW\]\n\[${GREEN}\]❯ \[${RESET}\]"

    else
        # :(* SIMPLE *)
        # export PS1='[\u@\h \W]\$ '
        
        # :(* KALI STYLE *)
        # export PS1="\[${RESET}\]\[${GREEN}\]┌────(\[${RESET}\]\u@\h\[${GREEN}\])-[\[${RESET}\]\w\[${GREEN}\]]\n\[${GREEN}\]└─$ \[${RESET}\]"

        # :(* EGO *)
        export PS1="\[${RESET}\]\[${GREEN}\](\u@\h)-[\[${RESET}\]\w\[${GREEN}\]] • \[$dateNOW\]\n\[${GREEN}\]> \[${RESET}\]"
    fi
  }
  PROMPT_COMMAND=prompt_command

# :---------- [ GOTO ]
# :ref. https://threkk.medium.com/how-to-use-bookmarks-in-bash-zsh-6b8074e40774
# :ref. https://twitter.com/mattn_jp/status/1434192554036137995
# :Requires `bash-completion` and sourced in .bashrc.
# :To add a goto link:
# :$ `ln -s </some/directory/path> ${HOME}/.ael/.goto/@<gotolink>` in  directory.
# :Usage: `goto @<gotolink>`

# if [ -d "${HOME}/.ael/.goto/" ]; then
  # export CDPATH=".:${HOME}/.ael/.goto:/"
  # alias goto="cd -P"
  # _goto() {
    # local IFS=$'\n'
    # COMPREPLY=( $(compgen -W "$(/bin/ls ~/.ael/.goto)" -- ${COMP_WORDS[COMP_CWORD]}) )
  # } && complete -F _goto goto
# fi

# :---------- [ RELOAD ]
reload() {
  if [ $LOADED = 'bashrc' ]; then
    . "${HOME}/.bashrc"
  elif [ $LOADED = 'profile' ]; then
    . "${HOME}/.profile"
  else
    message error "An error occured while reloading"
  fi
  }

# :========================= | HACKER | ====================================: #

# :---------- [ WORDLISTS ]

export WORDLISTS="/usr/local/share/wordlists"
export WLBEST1050="${WORDLISTS}/best1050.txt"
export WLBIG="${WORDLISTS}/seclist-big.txt"
export WLDIRMEDIUM="${WORDLISTS}/directory-list-2.3-medium.txt"
export WLLARGEFILES="${WORDLISTS}/raft-large-files.txt"
export WLROCKYOU="${WORDLISTS}/rockyou.txt"
export WLXPLATFORM="${WORDLISTS}/xplatform.txt"

# :---------- [ REVERSE SHELLS ]

export REVSHELLS="/usr/local/share/reverse_shells"
export RSNODEJS="${REVSHELLS}/patt_nodeJS.js"
export RSPHP="${REVSHELLS}/php-reverse-shell.php"
export RSWEB="${REVSHELLS}/webshell.php"

# :========================= | CONTAINERS | ================================: #

# :---------- [ DOCKER SERVICES ]
# :[docker666()]
# :version       : 2023-08-01 02:18:59 UTC
# :description   : START/STATUS/STOP docker service.

docker666() {

  # :Checking the current status of docker.service
  _status=$(systemctl is-active docker.service)

  # :Checking the provided argument (start, status, or stop) to determine the action
  case "${1}" in

    # :Start Docker service
    start )
      # :Checking if docker.service is already running
      if [ ${_status} = 'active' ]; then
        message alert "Docker.service is active"
      else
        # :If not running, start the Docker service
        sudo systemctl start docker.service
        message result "Starting docker.service..."
      fi
      ;;

    # :Get the status of Docker service
    status )
      message action "Checking docker.service status:"
      message result "Docker.service is ${_status}"
      ;;

    # :Stop Docker service
    stop )
      # :Checking docker.servie status
      if [ ${_status} = 'inactive' ]; then
        message alert "Docker.service is already stopped."
      else
        # :Confirm with the user before stopping the Docker service
        message question "Should I stop docker.service? [y/N]"
          if [[ "${_INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            # :Stopping Docker service and associated socket
            sudo systemctl stop docker.socket
            sudo systemctl stop docker.service

            # :Ask if the user wants to delete the docker0 network interface
            message question "Would you like to delete docker0 network interface? [y/N]"
              if [[ "$_INPUT" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                # :If confirmed, delete the docker0 network interface
                sudo ip link delete docker0 
              else
                # :If not confirmed, moving on
                message result "Leaving network interface intact."
                message result "Moving on..."
              fi
          else
            # :If not confirmed, moving on
            message result "Leaving docker.service running..."
            message result "Moving on..."
          fi
      fi
      ;;

    * )
      message warning "Usage: docker666 [start|status|stop]"

  esac
  }

# :---------- [ DOCKER STATS ]
# :[docker-stats()]
# :version       : 2023-08-01 02:38:21 UTC
# :description   : "Show Docker Stats"
# :todo          : '''
# :+ Verify why IP addresses don't show. [2023-03-02]
# :'''

docker_stats() {

    if [[ "$(systemctl is-active docker.service)" == "inactive" ]]; then
      docker666 start
    fi

    message action "Checking docker stats..."
    while read -r d; do
      _containerID=$(awk '{ print $1 }' <<< "${d}")
      if [[ -z "${_containerID}" ]]; then
        message warning "No container exists..."
      else
        message title "CONTAINER ID\tIP ADDR   \tNAME"
        _name=$(awk '{ print $2 }' <<< "${d}")
        _ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${_containerID})
        printf "%b\n" "${_containerID}\t${_ip}\t${_name}"
      fi
    done <<< $(docker ps -a | tail -n+2)
  }

  alias docker-stats="docker_stats"

# :---------- [ DOCKER CLEANER ]
# :[docker-container-cleaner()]
# :version       : 2023-08-01 10:40:08 UTC
# :description   : Delete all docker container.
# :todo          : '''
# :+ Make it list to delete with fzf. [2023-08-01]
# :'''

docker_container_cleaner() {

    if [[ "$(systemctl is-active docker.service)" == "inactive" ]]; then
        docker666 start
    fi

    message action "This will remove all Docker containers on this machine..."
    message question "Proceed? [Y/n]"
    if [[ "$_INPUT" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        for c in $(docker container ls --all | awk 'FNR > 1 {print $1}'); do
            docker container rm $c
        done
    else
        message result "GoodBye!!!"
    fi
  }

  alias docker-container-cleaner="docker_container_cleaner"

# :========================= | GIT | =======================================: #

# :---------- [ gitall ]
# :[gitall()]
# :version       = 2023-08-02 20:04:33 UTC
# :description   = "Fast update of git repo."

gitall() {

    git pull && git add . && git commit && git push
  }

# :---------- [ git-status ]
# :[git-status()]
# :version       = 2023-08-02 20:06:20 UTC
# :description   = "Get status of local git repository."
# :notes         = '''
# :ref. https://gist.github.com/giggio/1704664
# :'''

git_status() {

    dumpfile="/tmp/git-status.dump"

    if [ -z ${1} ]; then
      local_git_repository=$(find ${HOME} -name ".git" -type d | grep -v /.cache/ | sed 's/.git//' | fzf)
    else
      local_git_repository=${1}
    fi
    
    cd ${local_git_repository}
    git fetch
    git status > ${dumpfile}

    message action "Checking local repository status for\n    ${local_git_repository}"

    untracked=$(grep "Untracked files" ${dumpfile});
    unstaged=$(grep "Changes not staged for commit" ${dumpfile});
    to_commit=$(grep "Changes to be committed" ${dumpfile});
    is_ahead=$(grep "Your branch is ahead of" ${dumpfile});
    is_behind=$(grep "Your branch is behind" ${dumpfile});

    if [[ -n "${untracked}" ]]; then
      message result "ADD Files to add to repo."
    elif [[ -n ${unstaged} ]]; then
      message result "ADD Files to be staged."
    elif [[ -n "${to_commit}" ]]; then
      message result "COMMIT Files to commit."
    elif [[ -n "${is_ahead}" ]]; then
      message result "PUSH Time to push."
    elif [[ -n "${is_behind}" ]]; then
      message result "PULL Time to pull."
    else
      message result "STAY Nothing to do."
    fi
  }
  alias git-status='git_status'

#  :::::::::: ( SHELLUTILS )

# :: Shellutils sourced by default.
# :: Comment out to disable any of them.
SHELLUTILS=(

    # :: ( delete ) -> Delete directories.
    delete

    # :: ( elevate ) -> Repeats last command with sudo, if forgotten.
    elevate

    # :: ( getmp3 ) -> Extracting audio (.mp3) from video.
    getmp3

    # :: ( goto ) -> Simple directory bookmarks system.
    goto

    # :: ( ports ) -> Displays open ports.
    ports

    # :: ( processes ) -> Show processes.
    processes

    # :: ( reset-time ) -> Reset system time. Usefull when Windows boot screws time.
    reset-time

    # :: ( show-utc ) -> Show UTC time.
    show-utc

    # :: ( snake-env ) -> Manage python -m venv.
    snake-env

    # :: ( tmuxplus ) -> TMUX wrapper.
    tmuxplus

    # :: ( whoisweb ) -> Query WHOIS web if <whois> port 43 is blocked on your network.
    whoisweb

    # :: ( utils/ael-fzf ) -> FZF wrapper.
    # :: Utility wrapper around FZF, commenting out might keep other shellutils
    # :: from working properly.
    utils/ael-fzf
)

source_shellutils() {

    for shellutil in "${SHELLUTILS[@]}"; do
        [ -f "${HOME}"/.ael/shellutils/"${shellutil}" ] && . "${HOME}"/.ael/shellutils/"${shellutil}"
    done
}
source_shellutils

[ -f /home/ghost/.ael/shellutils/cyberchef ] && . /home/ghost/.ael/shellutils/cyberchef
[ -f /home/ghost/.ael/shellutils/deep-nmap ] && . /home/ghost/.ael/shellutils/deep-nmap
[ -f /home/ghost/.ael/shellutils/deep-scan ] && . /home/ghost/.ael/shellutils/deep-scan
[ -f /home/ghost/.ael/shellutils/directory-size ] && . /home/ghost/.ael/shellutils/directory-size
[ -f /home/ghost/.ael/shellutils/dvwa ] && . /home/ghost/.ael/shellutils/dvwa
[ -f /home/ghost/.ael/shellutils/extractor ] && . /home/ghost/.ael/shellutils/extractor
[ -f /home/ghost/.ael/shellutils/fixout ] && . /home/ghost/.ael/shellutils/fixout
[ -f /home/ghost/.ael/shellutils/ispeed ] && . /home/ghost/.ael/shellutils/ispeed
[ -f /home/ghost/.ael/shellutils/juice-shop ] && . /home/ghost/.ael/shellutils/juice-shop
[ -f /home/ghost/.ael/shellutils/history-cleaner ] && . /home/ghost/.ael/shellutils/history-cleaner
[ -f /home/ghost/.ael/shellutils/kali ] && . /home/ghost/.ael/shellutils/kali
[ -f /home/ghost/.ael/shellutils/lazygit ] && . /home/ghost/.ael/shellutils/lazygit
[ -f /home/ghost/.ael/shellutils/pacman-reset ] && . /home/ghost/.ael/shellutils/pacman-reset
[ -f /home/ghost/.ael/shellutils/ps-grep ] && . /home/ghost/.ael/shellutils/ps-grep
[ -f /home/ghost/.ael/shellutils/py-cleaner ] && . /home/ghost/.ael/shellutils/py-cleaner
[ -f /home/ghost/.ael/shellutils/py-server ] && . /home/ghost/.ael/shellutils/py-server
[ -f /home/ghost/.ael/shellutils/search-content ] && . /home/ghost/.ael/shellutils/search-content
[ -f /home/ghost/.ael/shellutils/shell-info ] && . /home/ghost/.ael/shellutils/shell-info
[ -f /home/ghost/.ael/shellutils/systeminfo ] && . /home/ghost/.ael/shellutils/systeminfo
[ -f /home/ghost/.ael/shellutils/tagalog ] && . /home/ghost/.ael/shellutils/tagalog
[ -f /home/ghost/.ael/shellutils/termbin ] && . /home/ghost/.ael/shellutils/termbin
[ -f /home/ghost/.ael/shellutils/translate ] && . /home/ghost/.ael/shellutils/translate
[ -f /home/ghost/.ael/shellutils/tunnel-info ] && . /home/ghost/.ael/shellutils/tunnel-info
