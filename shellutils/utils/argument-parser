#!/usr/bin/env bash
# :----------------------------------------------------------------------- INFO
# :[~/.ael/shellutils/utils/argument-parser]
# :author        : AlterEGO Linux
# :created       : 2025-06-27 10:50:27 UTC
# :updated       : 2025-07-01 12:15:06 UTC
# :description   : Argument parser.

argument-parser() {

    local RED=$'\033[31m'
    local RESET=$'\033[0m'

    unsetter() {
        unset ARGUMENT_INPUT
        unset __arg
        unset __conflict
        unset flag
        unset flags
        unset FLAGS_NAME
        unset is_valid_flag
        unset is_value_required
        unset next
        unset possible_conflicts
        unset split_flags
        unset -f unsetter
    }

    # :: Making sure ARGUMENT_INPUT is defined in the main script.
    if [[ ! -v ARGUMENT_INPUT ]]; then
        printf '%s\n' "${RED}[ argument-parser ]${RESET} Variable ARGUMENT_INPUT not set."
        return 1
    fi
    
    # :: Parsing concatenated short flags.
    split_flags=()
    for __arg in "${ARGUMENT_INPUT[@]}"; do
        if [[ "${__arg}" =~ ^-[a-zA-Z]{2,}$ ]]; then
            # :: Expand concatenated flags.
            for ((i=1; i<${#__arg}; i++)); do
                split_flags+=("-${__arg:i:1}")
            done
        else
            split_flags+=("$__arg")
        fi
    done

    FLAGS_NAME=()
    ARGUMENTS=()
    i=0
    while ((i < ${#split_flags[@]}));do
        __arg="${split_flags[$i]}"
        next="${split_flags[$i+1]}"

        if [[ "${__arg}" =~ ^-{1,2}[a-zA-Z]+$ ]]; then
            
            is_valid_flag=false
            for flag in "${flags[@]}"; do
                declare -n ref="${flag}"
                # :: Validate flag.
                if [[ "${__arg}" == "${ref[short]}" || "${__arg}" == "${ref[long]}" ]]; then
                    FLAGS_NAME+=("${flag}")
                    is_valid_flag=true
                    is_value_required="${ref[value_required]:-false}"
                    if [[ ${is_valid_flag} && ${is_value_required} == 'true' ]]; then
                        if [[ "${next}" =~ ^-{1,2}[a-zA-Z]+$ || "${next}" == '' ]]; then
                            printf '%s\n' "${RED}[!]${RESET} ${__arg} requires a valid value."
                            unset ARGUMENTS
                            unsetter
                            return 1
                        fi
                        ARGUMENTS+=("${__arg}")
                        ARGUMENTS+=("${next}")
                        ((i+=2))
                    elif [[ ${is_valid_flag} && ${is_value_required} == 'false' ]]; then 
                        ARGUMENTS+=("${__arg}")
                        ((i++))
                    fi
                    break
                fi
            done

            if ! $is_valid_flag; then
                printf '%s\n' "${RED}[!]${RESET} ${__arg} is an invalid flag."
                unset ARGUMENTS
                unsetter
                return 1
            fi

        else
            ARGUMENTS+=("${__arg}")
            ((i++))
        fi

    done

    # :: Verify for conflicts.
    for flag in "${FLAGS_NAME[@]}"; do
        declare -n ref="$flag"
        for possible_conflicts in "${FLAGS_NAME[@]}"; do
            if [[ ${flag} != ${possible_conflicts} ]]; then
                for __conflict in ${ref[conflicts_with]}; do
                    if [[ ${possible_conflicts} == ${__conflict} ]]; then
                        printf '%s\n' "${RED}[!]${RESET} Conflicting flags: $flag - $possible_conflicts."
                        unset ARGUMENTS
                        unsetter
                        return 1
                    fi
                done    
           fi
        done
    done

    unsetter
                    
    return 0
}
