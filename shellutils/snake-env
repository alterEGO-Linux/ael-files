#!/usr/bin/env sh
# :----------------------------------------------------------------------- INFO
# :[~/.ael/shellutils/snake-env]
# :author        : fantomH @alterEGO Linux
# :created       : 2024-10-23 11:28:49 UTC
# :updated       : 2024-10-23 11:29:01 UTC
# :description   : Manage python -m venv.

snake-env() {

    SNAKE_ENV_DIR="${HOME}/.ael/snake-envs"

    if [ ! -d "${SNAKE_ENV_DIR}" ]; then
        mkdir "${SNAKE_ENV_DIR}"
    fi

    snake-activate() {
        if [ ! -d "${SNAKE_ENV_DIR}/${ENVNAME}" ]; then
            echo "[!] Environment ${ENVNAME} does not exists."
            snake-reset-shell

        else
            echo "[-] Starting python environment: ${ENVNAME}"
            source "${SNAKE_ENV_DIR}/${ENVNAME}/bin/activate"
            prompt_command
            snake-install-jupyter
            unset -f snake-activate
        fi
        }


    snake-create() {
        python -m venv "${SNAKE_ENV_DIR}/${ENVNAME}"
        snake-activate
        }


    snake-exit() {
        echo "[!] Quitting python environment: ${ENVNAME}"
        [ -f ${HOME}/.bashrc ] && . ${HOME}/.bashrc
        snake-reset-shell
        deactivate
        }


    snake-info() {
        cat <<EOF
Info: snake-env "${ENVNAME}"
    python path : $(command -v python)
EOF
        }


    snake-reset-shell() {
        [ -f ${HOME}/.bashrc ] && . ${HOME}/.bashrc
        unset -f snake-activate
        unset -f create_environment
        unset -f snake-info
        unset -f snake-install-jupyter
        unset -f snake-notebook
        unset -f list_all_environments
        unset -f list_environments
        unset -f snake-usage
        unset -f snake-reset-shell
        unset -f snake-exit
        unset SNAKE_ENV_DIR
        unset ENVNAME
        }

    snake-install-jupyter() {

        # :/ref/ https://janakiev.com/blog/jupyter-virtual-envs/

        if [ -n $(command -v jupyter-notebook) ]; then
            if pip freeze | grep -q "ipykernel"; then
                echo "[-] Module ipykernel for Jupyter already installed."
            else
                echo "[-] Installing ipykernel for Jupyter."
                pip install ipykernel
            fi
            python -m ipykernel install --user --name="${ENVNAME}"

            if [[ ! -e "${SNAKE_ENV_DIR}/${ENVNAME}/${ENVNAME}.ipynb" ]]; then
                cat <<EOF > ${SNAKE_ENV_DIR}/${ENVNAME}/${ENVNAME}.ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF
            fi

        else
            echo "[!] Jupyter not installed!"
        fi
        }

    snake-notebook() {
        if [[ -e "${SNAKE_ENV_DIR}/${ENVNAME}/${ENVNAME}.ipynb" ]]; then
           jupyter-notebook "${SNAKE_ENV_DIR}/${ENVNAME}/${ENVNAME}.ipynb" &
        fi
        }

    list_all_environments() {

        echo "[+] Fetching ALL python environments' list:"
        find ~ -type d -name 'bin' -exec test -e '{}/python' ';' -print 2>/dev/null | xargs dirname
    }

    list_environments() {

        echo "[+] Fetching python environments' list:"
        find "${SNAKE_ENV_DIR}" -type d -name 'bin' -exec test -e '{}/python' ';' -print 2>/dev/null | xargs dirname | xargs -n1 basename
    }

    # :/PROMPT
    prompt_command() {
        history -a
        date_now="$(date "+%F %H:%M:%S %Z")"

        # :/TTY won't show unicode character #10095.
        if tty | grep pts &>/dev/null; then

            PS1="\[${RESET}\]\[${GREEN}\](${ENVNAME})-[\[${RESET}\]\w\[${GREEN}\]] • \[$date_now\]\n\[${GREEN}\]❯ \[${RESET}\]"
            export PS1

        else
            PS1="\[${RESET}\]\[${GREEN}\](${ENVNAME})-[\[${RESET}\]\w\[${GREEN}\]] • \[$date_now\]\n\[${GREEN}\]> \[${RESET}\]"
            export PS1
        fi
    }

    snake-usage() {
        cat <<EOF
Usage: snake-env [OPTIONS] <environment-name>

A utility to manage Python virtual environments in a custom directory, including setup for Jupyter kernel integration.

Options:
  -c, --create <environment-name>  Create a new Python virtual environment with the specified name and activate it.
  -a, --activate <environment-name> Activate an existing Python virtual environment.
  -l, --list                       List all managed Python virtual environments within the custom directory.
  --listall                        List all Python virtual environments on the system.
  -h, --help                       Display this help message.

Examples:
  snake-env -c myenv               # Create and activate a new environment named 'myenv'
  snake-env -a myenv               # Activate an existing environment named 'myenv'
  snake-env -l                     # List all environments managed by snake-env
  snake-env --listall              # List all Python environments on the system

Internal commands:
  snake-exit                       Exit environment.
  snake-info                       Show environment informations.
  snake-notebook                   Launch a Jupyter notebook.

EOF

        }

    if [[ "$#" -eq 0 ]]; then
        snake-usage
        snake-reset-shell
    fi
    
    while (( "$#" )); do
        case $1 in
            -a|--activate)
                shift
                ENVNAME="${1}"
                snake-activate
                ;;
            -c|--create)
                shift
                ENVNAME="${1}"
                snake-create
                ;;
            -h|--help)
                snake-usage
                snake-reset-shell
                ;;
            -l|--list)
                list_environments
                ;;
            --listall)
                list_all_environments
                ;;
      esac
      shift
    done
}
