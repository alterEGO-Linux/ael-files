#!/usr/bin/env bash
# :----------------------------------------------------------------------- INFO
# :[~/.ael/shellutils/goto]
# :author        : AlterEGO Linux
# :created       : 2024-09-13 11:00:51 UTC
# :updated       : 2025-03-07 12:55:34 UTC
# :description   : Simple directory bookmarks system.

GOTODIR="${HOME}/.ael/.goto/"

[[ ! -d "${GOTODIR}" ]] && mkdir -p "${GOTODIR}"

export CDPATH=".:$GOTODIR:/"

goto() {

    local IFS=$'\n' args=("$@") arg INPUT target

    usage() {
        cat <<EOF
================================================================================
[+] goto - Simple directory bookmarks system.
================================================================================
Usage: goto [bookmark|--add PATH BOOKMARK|--help|--list]

Examples:
  goto @app            # :Navigate to the @app bookmark.

Options:
  --add PATH BOOKMARK  Add a new bookmark for the specified path.
  --help               Display this help message.
  --list               List bookmarks.
================================================================================
EOF
    }

    # :-( help )
    for arg in "${args[@]}"; do
        if [ $arg == '-h' ] || [ $arg == '--help' ]; then
            usage
            unset -f usage
            return 0
        fi
    done

    # :-( list )
    for arg in "${args[@]}"; do
        if [ $arg == '-l' ] || [ $arg == '--list' ]; then
            usage
            unset -f usage
            echo
            find "${GOTODIR}" -maxdepth 1 -type l | while read -r link; do
                target=$(readlink -f "${link}")
                printf "%-15s -> %s\n" "$(basename "${link}")" "${target}"
            done
            return 0
        fi
    done

    # :-( add )
    for i in "${!args[@]}"; do
        if [[ "${args[i]}" == "-a" ]] || [[ "${args[i]}" == "--add" ]]; then
            if [[ -n "${args[i+1]}" && -n "${args[i+2]}" ]]; then
                ln -s "$(realpath "${args[i+1]}")" "${GOTODIR}/${args[i+2]}"
                echo "[+] goto - Bookmark '${args[i+2]}' added for path '${args[i+1]}'."
                return 0
            else
                usage
                unset -f usage
                echo
                echo "[!] Error: Both PATH and BOOKMARK are required."
                return 1
            fi
        fi
    done

    # :-( remove )
    for i in "${!args[@]}"; do
        if [[ "${args[i]}" == "-r" ]] || [[ "${args[i]}" == "--remove" ]]; then
            if [[ -n "${args[i+1]}" ]]; then
                target="${GOTODIR}/${args[i+1]}"
                if [[ -L "$target" ]]; then
                    read -p "[?] Are you sure your want to delete this bookmark? [y/N] " INPUT
                        if [[ "${INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                            rm -f "$target"
                            echo "[+] goto - Bookmark '${args[i+1]}' removed."
                            return 0
                        else
                            echo "[!] goto - Abording deletion!"
                            return 0
                        fi
                else
                    usage
                    unset -f usage
                    echo
                    echo "[!] Error: Bookmark '${args[i+1]}' not found."
                    return 1
                fi
            else
                usage
                unset -f usage
                echo
                echo "[!] Error: BOOKMARK is required."
                return 1
            fi
        fi
    done

    # :-( goto )
    if [[ $args == '' ]]; then
        usage
        unset -f usage
        return 1
    elif [[ $# -ne 1 ]]; then
        usage
        unset -f usage
        echo
        echo "[!] Error: Too many arguments."
        return 1
    else
        if [[ -e "${GOTODIR}/$1" ]]; then
            cd -P "${GOTODIR}/$1"
            return 0
        else
            usage
            unset -f usage
            echo
            echo "[!] Error: '$1' is not a valid bookmark"
            return 1
        fi
    fi

    unset -f usage
}

_goto_complete() {
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "$(find "${GOTODIR}" -maxdepth 1 -type l -printf "%f\n")" -- "${COMP_WORDS[COMP_CWORD]}") )

} && complete -F _goto_complete goto
