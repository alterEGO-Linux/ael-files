#!/usr/bin/env sh
# :----------------------------------------------------------------------- INFO
# :[~/.ael/.aelcore]
# :author        : fantomH @alterEGO Linux
# :created       : 2021-03-19 09:37:19 UTC
# :updated       : 2024-08-29 14:57:01 UTC
# :description   : alterEGO Linux core shell configuration.

# :-----/ SOURCE MODULES /-----:

[ -f ${HOME}/.ael/bash-ael/messages.bash ] && . ${HOME}/.ael/bash-ael/messages.bash
[ -f ${HOME}/.ael/bash-ael/colors.bash ] && . ${HOME}/.ael/bash-ael/colors.bash
[ -f ${HOME}/.ael/.extra ] && . ${HOME}/.ael/.extra

# :-----/ COLORS /-----:

export TERM="xterm-256color"

# :Sets LS_COLORS
[[ -e ${HOME}/.ael/.dircolors ]] \
&& eval "`dircolors --sh ${HOME}/.ael/.dircolors`"

# :-----/ ALIASES /-----:

alias less="bat"
alias grep="grep --color=auto"
alias ll='ls --all --human-readable -l --color=auto'
alias ls='ls --all --color=auto'

# :Makes tmux understand the environment is important.
alias tmux="env TERM=screen-256color tmux -u"

alias msfconsole='msfconsole -x "db_connect ${USER}@msf"'
alias open="ael-open"

# :/todo/ Should we still source automatically. See above.
alias attack="source ${HOME}/.ael/.tryhackme"

alias pythonenvs=". ~/.ael/.pythonenvs"

# :-----/ DEFAULT APPLICATIONS /-----:

export BROWSER=firefox
export FZF_DEFAULT_COMMAND='rg --files --hidden '

# export TERMINAL="xfce4-terminal --hide-scrollbar --hide-menubar --hide-toolbar"
export TERMINAL="alacritty"
export VISUAL=vim
export EDITOR=${VISUAL}

# :-----/ PATH /-----:
# :ref. https://www.linuxjournal.com/content/removing-duplicate-path-entries

PATH="${PATH}:${HOME}/scripts:${HOME}/bin"
PATH=$(printf '%s' "${PATH}" | awk -v RS=: '!($0 in a) {a[$0]; printf("%s%s", length(a) > 1 ? ":" : "", $0)}')

export PATH

# :-----/ HISTORY /-----:

export HISTIGNORE="cd:clear:delete:exit:gitall:history:ls:mv:nohup:vim"
export HISTCONTROL=ignoreboth:erasedups
export HISTSIZE=1000000
export HISEFILESIZE=1000000

# :Uncomment if your want timestamp in history
# export HISTTIMEFORMAT="%Y-%m-%d %T %z "

# :-----/ MAN IN COLOR /-----:

# :/todo/ Need to work on the colors.
export LESS_TERMCAP_mb=$(printf '\e[01;31m') # enter blinking mode – red
export LESS_TERMCAP_md=$(printf '\e[01;35m') # enter double-bright mode – bold, magenta
export LESS_TERMCAP_me=$(printf '\e[0m')     # turn off all appearance modes (mb, md, so, us)
export LESS_TERMCAP_se=$(printf '\e[0m')     # leave standout mode
export LESS_TERMCAP_so=$(printf '\e[01;33m') # enter standout mode – yellow
export LESS_TERMCAP_ue=$(printf '\e[0m')     # leave underline mode
export LESS_TERMCAP_us=$(printf '\e[04;36m') # enter underline mode – cyan

# :-----/ VIM /-----:

# :Enables CTRL+s in vim.
# :ref. https://stackoverflow.com/questions/3446320/in-vim-how-to-map-save-to-ctrl-s
# :Requires mapping in .vimrc:
# :inoremap <C-s> <ESC>:write<CR>

stty -ixon

# :---------- [ QT5 ]

# :ref. https://wiki.manjaro.org/index.php/Set_all_Qt_app%27s_to_use_GTK%2B_font_%26_theme_settings
# :Set all Qt app's to use GTK+ font & theme settings
# :Overview
# :When using a Desktop Environment or Window Manager that doesn't allow for the settings of QT themes,
# :you can set QT to use your GTK themes instead.
# :Using qt5ct
# :note: In some Manjaro editions, this is already done for you by default
# :Install qt5ct using your favorite package manager or the command:
# :pamac install qt5ct
# :Set environment variables in ~/.profile by adding or updating the following lines:
# :export QT_QPA_PLATFORMTHEME="qt5ct"
# :Run the application QT5 Configuration Manager from the menu or run the command qt5ct.
# :Logout and login again to make the change effective

# export QT_QPA_PLATFORMTHEME="qt5ct"

# :---------- [ IP ADDRESSES ]
ipaddr() {

  # :IP addresses will be exported when .egorc is sourced with the function
  # :call, but can also be 'refreshed' when calling ipaddr from the terminal
  # :(ex. after starting a VPN connection).

  # :`host` is provided by the package 'bind'.
  PUBIP="$(host myip.opendns.com resolver1.opendns.com                      \
            | grep --color=never -oP '(?<=myip.opendns.com has address ).*$')"
  export PUBIP

  # :TODO: Not working properly if not wired.
  LANIP="$(ip address | grep --color=never -oP "(?<=inet ).*(?=/.*enp)")"
  export LANIP

  # printf "%s\n" "LAN IP:     ${LANIP}"
  # printf "%s\n" "Public IP:  ${PUBIP}"
  }
  ipaddr

# :---------- [ PROMPTS ]
prompt_command() {
    history -a
    dateNOW="$(date "+%F %H:%M:%S %Z")"

    # :tty won't show unicode character #10095.
    if tty | grep pts &>/dev/null; then

        # :(* SIMPLE *)
        # export PS1='[\u@\h \W]\$ '
        
        # :(* KALI STYLE *)
        # export PS1="\[${RESET}\]\[${GREEN}\]┌────(\[${RESET}\]\u@\h\[${GREEN}\])-[\[${RESET}\]\w\[${GREEN}\]]\n\[${GREEN}\]└─$ \[${RESET}\]"

        # :(* EGO *)
        export PS1="\[${RESET}\]\[${GREEN}\](\u@\h)-[\[${RESET}\]\w\[${GREEN}\]] • \[$dateNOW\]\n\[${GREEN}\]❯ \[${RESET}\]"

    else
        # :(* SIMPLE *)
        # export PS1='[\u@\h \W]\$ '
        
        # :(* KALI STYLE *)
        # export PS1="\[${RESET}\]\[${GREEN}\]┌────(\[${RESET}\]\u@\h\[${GREEN}\])-[\[${RESET}\]\w\[${GREEN}\]]\n\[${GREEN}\]└─$ \[${RESET}\]"

        # :(* EGO *)
        export PS1="\[${RESET}\]\[${GREEN}\](\u@\h)-[\[${RESET}\]\w\[${GREEN}\]] • \[$dateNOW\]\n\[${GREEN}\]> \[${RESET}\]"
    fi
  }
  PROMPT_COMMAND=prompt_command

# :---------- [ GOTO ]
# :ref. https://threkk.medium.com/how-to-use-bookmarks-in-bash-zsh-6b8074e40774
# :ref. https://twitter.com/mattn_jp/status/1434192554036137995
# :Requires `bash-completion` and sourced in .bashrc.
# :To add a goto link:
# :$ `ln -s </some/directory/path> ${HOME}/.ael/.goto/@<gotolink>` in  directory.
# :Usage: `goto @<gotolink>`

if [ -d "${HOME}/.ael/.goto/" ]; then
  export CDPATH=".:${HOME}/.ael/.goto:/"
  alias goto="cd -P"
  _goto() {
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "$(/bin/ls ~/.ael/.goto)" -- ${COMP_WORDS[COMP_CWORD]}) )
  } && complete -F _goto goto
fi

# :---------- [ RELOAD ]
reload() {
  if [ $LOADED = 'bashrc' ]; then
    . "${HOME}/.bashrc"
  elif [ $LOADED = 'profile' ]; then
    . "${HOME}/.profile"
  else
    message error "An error occured while reloading"
  fi
  }

# :========================= | PACKAGE MANAGER | ===========================: #

# :---------- [ pacman-reset ]
# :[pacman-reset()]
# :version       : 2023-10-20 10:46:22 UTC
# :description   : Re-initialize pacman sync, mirrorlist and keyring.
# :packages      : ['curl', 'sed', 'pacman']
pacman_reset() {

    message action "< pacman-reset() > from $(basename $BASH_SOURCE)"
    message action "Resetting mirrolist and  ..."

    sudo rm -rf /var/lib/pacman/sync
    sudo curl -o /etc/pacman.d/mirrorlist 'https://archlinux.org/mirrorlist/?country=US&protocol=http&protocol=https&ip_version=4'
    sudo sed -i -e 's/\#Server/Server/g' /etc/pacman.d/mirrorlist
    sudo pacman -Syy --noconfirm archlinux-keyring
  }
  alias pacman-reset='pacman_reset'

# :========================= | NETWORK | ===================================: #

# :-----/ (network) ispeed() /-----:
ispeed() {

    # :(INFO)
    # /version       : 2024-05-16 14:54:18 UTC
    # /description   : Internet connection speed meter
    # /packages      : ['speedtest-cli']
 
    message action "< ispeed() > from $(basename $BASH_SOURCE)"
    message action "Calculating your Internet connection speed ..."

    # :Method no.1
    # curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py \
    # | python - --secure

    # :Method no.2
    /usr/bin/speedtest --secure
    }

[ -f ${HOME}/.ael/scripts/deep-nmap ] && . ${HOME}/.ael/scripts/deep-nmap
[ -f ${HOME}/.ael/scripts/deep-scan ] && . ${HOME}/.ael/scripts/deep-scan
[ -f ${HOME}/.ael/scripts/ports ] && . ${HOME}/.ael/scripts/ports

# :---------- [ pyserver ]
# :[pyserver()]
# :version       = 2023-08-04 02:14:47 UTC
# :description   = Start a web server.
# :packages      = ['python']

pyserver() {

    message action "< pyserver() > from $(basename $BASH_SOURCE)"
    message action "Starting web server ..."

    python -m http.server
  }


[ -f ${HOME}/.ael/scripts/tunnel-info ] && . ${HOME}/.ael/scripts/tunnel-info

# :---------- [ viewips ]
# :[viewips()]
# :version       = 2023-10-20 09:44:24 UTC
# :description   = Display IP addresses.
# :packages      = ['coreutils', 'gawk', 'grep', 'procps-ng']

viewips() {

    message action "< viewips() > from $(basename $BASH_SOURCE)"
    message action "Current IP address(es) ..."

    while read -r _interfaces; do
        spaces=30
        _interface=$(cut -f 1 <<<"${_interfaces}")
        _ip=$(cut -f 2 <<<"${_interfaces}")
        printf "%s%$((spaces - ${#_interface}))s%s\n" "$_interface" "$_ip"
    done <<< $(/usr/bin/ip address | grep "inet [1-9]" | awk '{ print $NF "\t" $2}')
  }

# :---------- [ whoisweb ]
# :[whoisweb()]
# :version       = 2023-10-20 09:45:58 UTC
# :description   = Query WHOIS web if `whois` port 43 is blocked on your network.
# :packages      = ['curl', 'jq', 'sed']

whoisweb() {

    message action "< whoisweb > from $(basename $BASH_SOURCE)"
    message action "Querying whois on the web for ${1} ..."

    curl --silent https://whoisjs.com/api/v1/${1}                             \
    | jq ".raw"                                                               \
    | sed "s/\\\r\\\n/\\n/g"
  }

# :========================= | HACKER | ====================================: #

# :---------- [ WORDLISTS ]

export WORDLISTS="/usr/local/share/wordlists"
export WLBEST1050="${WORDLISTS}/best1050.txt"
export WLBIG="${WORDLISTS}/seclist-big.txt"
export WLDIRMEDIUM="${WORDLISTS}/directory-list-2.3-medium.txt"
export WLLARGEFILES="${WORDLISTS}/raft-large-files.txt"
export WLROCKYOU="${WORDLISTS}/rockyou.txt"
export WLXPLATFORM="${WORDLISTS}/xplatform.txt"

# :---------- [ REVERSE SHELLS ]

export REVSHELLS="/usr/local/share/reverse_shells"
export RSNODEJS="${REVSHELLS}/patt_nodeJS.js"
export RSPHP="${REVSHELLS}/php-reverse-shell.php"
export RSWEB="${REVSHELLS}/webshell.php"

# :========================= | CONTAINERS | ================================: #

# :---------- [ DOCKER SERVICES ]
# :[docker666()]
# :version       : 2023-08-01 02:18:59 UTC
# :description   : START/STATUS/STOP docker service.

docker666() {

  # :Checking the current status of docker.service
  _status=$(systemctl is-active docker.service)

  # :Checking the provided argument (start, status, or stop) to determine the action
  case "${1}" in

    # :Start Docker service
    start )
      # :Checking if docker.service is already running
      if [ ${_status} = 'active' ]; then
        message alert "Docker.service is active"
      else
        # :If not running, start the Docker service
        sudo systemctl start docker.service
        message result "Starting docker.service..."
      fi
      ;;

    # :Get the status of Docker service
    status )
      message action "Checking docker.service status:"
      message result "Docker.service is ${_status}"
      ;;

    # :Stop Docker service
    stop )
      # :Checking docker.servie status
      if [ ${_status} = 'inactive' ]; then
        message alert "Docker.service is already stopped."
      else
        # :Confirm with the user before stopping the Docker service
        message question "Should I stop docker.service? [y/N]"
          if [[ "${_INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            # :Stopping Docker service and associated socket
            sudo systemctl stop docker.socket
            sudo systemctl stop docker.service

            # :Ask if the user wants to delete the docker0 network interface
            message question "Would you like to delete docker0 network interface? [y/N]"
              if [[ "$_INPUT" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                # :If confirmed, delete the docker0 network interface
                sudo ip link delete docker0 
              else
                # :If not confirmed, moving on
                message result "Leaving network interface intact."
                message result "Moving on..."
              fi
          else
            # :If not confirmed, moving on
            message result "Leaving docker.service running..."
            message result "Moving on..."
          fi
      fi
      ;;

    * )
      message warning "Usage: docker666 [start|status|stop]"

  esac
  }

# :---------- [ DOCKER STATS ]
# :[docker-stats()]
# :version       : 2023-08-01 02:38:21 UTC
# :description   : "Show Docker Stats"
# :todo          : '''
# :+ Verify why IP addresses don't show. [2023-03-02]
# :'''

docker_stats() {

    if [[ "$(systemctl is-active docker.service)" == "inactive" ]]; then
      docker666 start
    fi

    message action "Checking docker stats..."
    while read -r d; do
      _containerID=$(awk '{ print $1 }' <<< "${d}")
      if [[ -z "${_containerID}" ]]; then
        message warning "No container exists..."
      else
        message title "CONTAINER ID\tIP ADDR   \tNAME"
        _name=$(awk '{ print $2 }' <<< "${d}")
        _ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${_containerID})
        printf "%b\n" "${_containerID}\t${_ip}\t${_name}"
      fi
    done <<< $(docker ps -a | tail -n+2)
  }

  alias docker-stats="docker_stats"

# :---------- [ DOCKER CLEANER ]
# :[docker-container-cleaner()]
# :version       : 2023-08-01 10:40:08 UTC
# :description   : Delete all docker container.
# :todo          : '''
# :+ Make it list to delete with fzf. [2023-08-01]
# :'''

docker_container_cleaner() {

    if [[ "$(systemctl is-active docker.service)" == "inactive" ]]; then
        docker666 start
    fi

    message action "This will remove all Docker containers on this machine..."
    message question "Proceed? [Y/n]"
    if [[ "$_INPUT" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        for c in $(docker container ls --all | awk 'FNR > 1 {print $1}'); do
            docker container rm $c
        done
    else
        message result "GoodBye!!!"
    fi
  }

  alias docker-container-cleaner="docker_container_cleaner"

# :---------- [ CYBERCHEF ]
# :[cyberchef()]
# :version       : 2023-08-01 10:42:34 UTC
# :description   : Cyberchef: A simple, intuitive web app for analysing and decoding data without having to deal with complex tools or programming languages. CyberChef encourages both technical and non-technical people to explore data formats, encryption and compression.

cyberchef() {

    docker666 start

    if [[ "${1}" == 'stop' ]]; then
        docker stop $(docker ps | grep "mpepping/cyberchef"  | cut -d ' ' -f1)
        docker666 stop
    else
        if docker ps --all | grep -q "mpepping/cyberchef"; then
            $BROWSER "http://localhost:8888"
        else
            message action "Starting Cyberchef container on AEL..."
            docker run --rm -d -p 8888:8000 mpepping/cyberchef                \
            && $BROWSER "http://localhost:8888"
        fi
    fi
  }

# :---------- [ DAMN VULNERABLE WEBAPP (DVWA) ]
# :[dvwa()]
# :version       : 2023-08-01 10:48:57 UTC
# :description   : damn vulnerable webapp (DVWA).

dvwa() {

    docker666 start

    if [[ "${1}" == 'stop' ]]; then
        docker stop $(docker ps | grep DVWA | cut -d ' ' -f1)
        docker666 stop
    else
        message action "Starting Damn Vulnerable Webapp container on AEL..."
        #... If container doesn't exist, create one
        if [[ -z $(docker ps -a | awk '/DVWA/ { print $NF }') ]]; then
            docker run --name DVWA -it -p 81:80 vulnerables/web-dvwa &
            sleep 10
            $BROWSER "http://localhost:81/login.php"
        else
            if [[ -z "$(docker ps | grep DVWA)" ]]; then
                docker start DVWA
                $BROWSER "http://localhost:81/login.php"
            else
                $BROWSER "http://localhost:81/login.php"
            fi
        fi
    fi
  }

# :---------- [ OWASP juice shop ]
# :[juice-shop()]
# :version       : 2023-08-01 10:50:28 UTC
# :description   : OWASP juice shop.

juice_shop() {

    docker666 start

    if [[ "${1}" == 'stop' ]]; then
        docker stop $(docker ps | grep juice_shop | cut -d ' ' -f1)
        docker666 stop
    else
        message action "Starting OWASP Juice Shop container on AEL..."
        #... If container doesn't exist, create one
        if [[ -z $(docker ps -a | awk '/juice_shop/ { print $NF }') ]]; then
            docker run --name juice_shop -p 3000:3000 bkimminich/juice-shop &
            sleep 10
            $BROWSER "http://localhost:3000"
        else
            if [[ -z "$(docker ps | grep juice_shop)" ]]; then
                docker start juice_shop
                $BROWSER "http://localhost:3000"
            else
                $BROWSER "http://localhost:3000"
            fi
        fi
    fi
}

  alias juice-shop="juice_shop"

# :---------- [ KALI LINUX ]
# :[kali()]
# :version       : 2023-08-01 10:51:18 UTC
# :description   : Run Kali Linux on AEL.
# :todo          : '''
# :+ Use startx to start a WM session (You will need to killall Xephyr to
# :completely exit. <= Need to find a solution.
# :'''

kali() {

    docker666 start
    xhost +

    message action "Starting Kali Linux container on AEL..."

    # :TODO: If image doesn't exist, create from /usr/local/share/dockerfiles/Dockerfile-kali
    # :docker build -f /usr/local/share/dockerfiles/Dockerfile-kali --tag kali_on_ael .

    # :If container doesn't exist, create one
    if [[ -z $(docker ps -a | awk '/kali_on_ael/ { print $NF }') ]]; then
        docker run --name kali_on_ael                                         \
                   --net="host"                                               \
                   --privileged -it                                           \
                   -v /tmp/.X11-unix:/tmp/.X11-unix kali_on_ael
    else
        if [[ -z "$(docker ps | grep kali_on_ael)" ]]; then
            docker start -i kali_on_ael
        else
            message alert "Kali_on_ael is already running..."
        fi
    fi

    xhost -
    docker666 stop
  }

# :========================= | GIT | =======================================: #

# :---------- [ gitall ]
# :[gitall()]
# :version       = 2023-08-02 20:04:33 UTC
# :description   = "Fast update of git repo."

gitall() {

    git pull && git add . && git commit && git push
  }

# :---------- [ git-status ]
# :[git-status()]
# :version       = 2023-08-02 20:06:20 UTC
# :description   = "Get status of local git repository."
# :notes         = '''
# :ref. https://gist.github.com/giggio/1704664
# :'''

git_status() {

    dumpfile="/tmp/git-status.dump"

    if [ -z ${1} ]; then
      local_git_repository=$(find ${HOME} -name ".git" -type d | grep -v /.cache/ | sed 's/.git//' | fzf)
    else
      local_git_repository=${1}
    fi
    
    cd ${local_git_repository}
    git fetch
    git status > ${dumpfile}

    message action "Checking local repository status for\n    ${local_git_repository}"

    untracked=$(grep "Untracked files" ${dumpfile});
    unstaged=$(grep "Changes not staged for commit" ${dumpfile});
    to_commit=$(grep "Changes to be committed" ${dumpfile});
    is_ahead=$(grep "Your branch is ahead of" ${dumpfile});
    is_behind=$(grep "Your branch is behind" ${dumpfile});

    if [[ -n "${untracked}" ]]; then
      message result "ADD Files to add to repo."
    elif [[ -n ${unstaged} ]]; then
      message result "ADD Files to be staged."
    elif [[ -n "${to_commit}" ]]; then
      message result "COMMIT Files to commit."
    elif [[ -n "${is_ahead}" ]]; then
      message result "PUSH Time to push."
    elif [[ -n "${is_behind}" ]]; then
      message result "PULL Time to pull."
    else
      message result "STAY Nothing to do."
    fi
  }
  alias git-status='git_status'

# :---------- [ lazygit ]
# :[lazygit]
# :version       = 2023-08-02 20:08:41 UTC
# :notes         = '''
# :The variable lazygit_repositories is defined in ~/.ael/.extra
# :'''

lazygit() {

    if [[ ! -e "${lazygit_repositories}" ]]; then
        message warning "Please define `lazygit_repositories` in `~/.ael/.extra`."
    fi

    _cwd="$(pwd)"
    cd ${HOME}
    for repo in "${lazygit_repositories[@]}"; do
        message action "Updating $repo"
        cd "$repo"
        git pull                                                              \
        && git add .                                                          \
        && git commit -m "Updated using lazygit..."                           \
        && git push
        cd ${HOME}
    done
    cd "$_cwd"
  }

# :========================= | FUNCTIONS | =================================: #

[ -f ${HOME}/.ael/scripts/busy ] && . ${HOME}/.ael/scripts/busy

# :---------- [ cheat ]
# :[cheat()]
# :version       = 2023-08-01 19:57:57 UTC
# :description   = "Query https://cheat.sh."
# :notes         = '''
# :Menu with `fzf` and display with `less`.
# :https://github.com/chubin/cheat.sh
# :'''

cheat() {

    message action "< cheat > from $(basename $BASH_SOURCE)"

    cheat="$(curl -s cheat.sh/:list                                           \
            | fzf --layout="reverse"                                          \
                  --prompt='::'                                               \
                  --preview-window=up:80%                                     \
                  --preview 'cat <(curl -s cheat.sh/{})')"

    [[ -z ${cheat} ]] && exit 0

    curl -s cheat.sh/"${cheat}" | less -R
  }


[ -f ${HOME}/.ael/scripts/directory-size ] && . ${HOME}/.ael/scripts/directory-size
[ -f ${HOME}/.ael/scripts/delete ] && . ${HOME}/.ael/scripts/delete
[ -f ${HOME}/.ael/scripts/fixout ] && . ${HOME}/.ael/scripts/fixout
[ -f ${HOME}/.ael/scripts/fuck ] && . ${HOME}/.ael/scripts/fuck
[ -f ${HOME}/.ael/scripts/getmp3 ] && . ${HOME}/.ael/scripts/getmp3
[ -f ${HOME}/.ael/scripts/history-cleaner ] && . ${HOME}/.ael/scripts/history-cleaner
[ -f ${HOME}/.ael/scripts/processes ] && . ${HOME}/.ael/scripts/processes
[ -f ${HOME}/.ael/scripts/ps-grep ] && . ${HOME}/.ael/scripts/ps-grep
[ -f ${HOME}/.ael/scripts/py-cleaner ] && . ${HOME}/.ael/scripts/py-cleaner
[ -f ${HOME}/.ael/scripts/reset-time ] && . ${HOME}/.ael/scripts/reset-time
[ -f ${HOME}/.ael/scripts/search-content ] && . ${HOME}/.ael/scripts/search-content
[ -f ${HOME}/.ael/scripts/shell-info ] && . ${HOME}/.ael/scripts/shell-info
[ -f ${HOME}/.ael/scripts/show-utc ] && . ${HOME}/.ael/scripts/show-utc
[ -f ${HOME}/.ael/scripts/tagalog ] && . ${HOME}/.ael/scripts/tagalog
[ -f ${HOME}/.ael/scripts/termbin ] && . ${HOME}/.ael/scripts/termbin
[ -f ${HOME}/.ael/scripts/translate ] && . ${HOME}/.ael/scripts/translate
